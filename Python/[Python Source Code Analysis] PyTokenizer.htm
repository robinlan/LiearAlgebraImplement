<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
     
    <html xmlns="http://www.w3.org/1999/xhtml">
    
<head>   
    
     
    <script type="text/javascript" src="http://c.csdnimg.cn/pubfooter/js/tracking.js" charset="utf-8"></script>  

    <script type="text/javascript">
        var protocol = window.location.protocol;
        document.write('<script type="text/javascript" src="' + protocol + '//csdnimg.cn/pubfooter/js/repoAddr2.js?v=' + Math.random() + '"></' + 'script>');
    </script>

     <script id="allmobilize" charset="utf-8" src="http://a.yunshipei.com/46aae4d1e2371e4aa769798941cef698/allmobilize.min.js"></script>
 <meta http-equiv="Cache-Control" content="no-siteapp" /><link rel="alternate" media="handheld" href="#" />

    <title>Python源码分析3 – 词法分析器PyTokenizer - 张羿的CSDN专栏
        - 博客频道 - CSDN.NET</title>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <meta name="description" content="AGG " />
    <script src="http://static.blog.csdn.net/scripts/jquery.js" type="text/javascript"></script>
    <script type="text/javascript" src="http://static.blog.csdn.net/scripts/ad.js?v=1.1"></script>
        <!--new top-->
               <link rel="stylesheet" href="http://static.csdn.net/public/common/toolbar/css/index.css">        <!--new top-->

    <link rel="Stylesheet" type="text/css" href="http://static.blog.csdn.net/skin/default/css/style.css?v=1.1" />
    <link id="RSSLink" title="RSS" type="application/rss+xml" rel="alternate" href="/ATField/rss/list" />
    <link rel="shortcut icon" href="http://c.csdnimg.cn/public/favicon.ico" />
    <link type="text/css" rel="stylesheet" href="http://static.blog.csdn.net/scripts/SyntaxHighlighter/styles/default.css" />
 


</head>
<body>
    
   
      <!--new top-->
    <script id="toolbar-tpl-scriptId" fixed="true" prod="blog" skin="black" src="http://static.csdn.net/public/common/toolbar/js/html.js" type="text/javascript"></script>
     <!--new top-->
    <div id="container">
        <div id="header">
    <div class="header">
        <div id="blog_title">
            <h2>
                <a href="http://blog.csdn.net/atfield">张羿的CSDN专栏</a></h2>
            <h3>正在开发.NET Native</h3>
            <div class="clear">
            </div>
        </div>
        <div class="clear">
        </div>
    </div>
</div>
<div id="navigator">
    <div class="navigator_bg">
    </div>
    <div class="navigator">
        <ul>
            
                <li id="btnContents"><a href="http://blog.csdn.net/atfield?viewmode=contents"><span onclick="_gaq.push(['_trackEvent','function', 'onclick', 'blog_articles_mulu'])">
                    <img src="http://static.blog.csdn.net/images/ico_list.gif">目录视图</span></a></li>
                <li id="btnView"><a href="http://blog.csdn.net/atfield?viewmode=list"><span onclick="_gaq.push(['_trackEvent','function', 'onclick', 'blog_articles_zhaiyao'])">
                    <img src="http://static.blog.csdn.net/images/ico_summary.gif">摘要视图</span></a></li>
                <li id="btnRss"><a href="http://blog.csdn.net/atfield/rss/list"><span onclick="_gaq.push(['_trackEvent','function', 'onclick', 'blog_articles_RSS'])">
                    <img src="http://static.blog.csdn.net/images/ico_rss.gif">订阅</span></a></li>                

            </ul>
    </div>
</div>
<script type="text/javascript">
    var username = "ATField";
    var _blogger = username;
    var blog_address = "http://blog.csdn.net/atfield";
    var static_host = "http://static.blog.csdn.net";
    var currentUserName = "";  
</script>

        <div id="body">
            <div id="main">
                <div class="main">
                        <div class="ad_class">
<div class="notice tracking-ad" data-mod='popu_3' > 

<a href="http://blog.csdn.net/blogdevteam/article/details/47808555"><font color=red>【博乐】把C币，装进你的口袋</font></a>
&nbsp;&nbsp;&nbsp;
  

<a href="http://huiyi.csdn.net/activity/product/goods_list?project_id=2262">
<font color=blue>专家亲授Hadoop技术，你报名了吗？ 
</font></a>
&nbsp;&nbsp;&nbsp;

<a href="http://edu.csdn.net/combo/detail/63">
<font color=red>软考套餐限时7折优惠 
</font></a>
&nbsp;&nbsp;&nbsp;

<a href="http://www.csdn.net/app/">
<font color=blue>CSDN移动客户端，下载送50C币
</font></a>
&nbsp;&nbsp;&nbsp;</div>                        </div>
                        

  
<link href="http://static.blog.csdn.net/css/comment1.css" type="text/css" rel="stylesheet" />
<link href="http://static.blog.csdn.net/css/style1.css" type="text/css" rel="stylesheet" />
<script language='JavaScript' type='text/javascript' src='http://download.csdn.net/js/jquery.cookie.js'></script>
<script type="text/javascript" src="http://c.csdnimg.cn/rabbit/search-service/main.js"></script>
<link rel="stylesheet" href="http://static.blog.csdn.net/public/res-min/markdown_views.css?v=1.0" />
<script type="text/javascript" src="http://static.blog.csdn.net/public/res/bower-libs/MathJax/MathJax.js?config=TeX-AMS_HTML"></script>

  <script type="text/ecmascript">
      window.quickReplyflag = true;
    </script>
<div id="article_details" class="details">
    <div class="article_title">   
         <span class="ico ico_type_Original"></span>


    <h1>
        <span class="link_title"><a href="/atfield/article/details/1439068">
        Python源码分析3 – 词法分析器PyTokenizer            
        </a></span>
    </h1>
</div>

   

    <div class="article_manage">
        <span class="link_categories">
        分类：
            <a href="/ATField/article/category/256448" onclick="_gaq.push(['_trackEvent','function', 'onclick', 'blog_articles_fenlei']);">Python源码分析</a> 
        </span>
    <span class="link_postdate">2006-12-12 00:20</span>
    <span class="link_view" title="阅读次数">4403人阅读</span>
    <span class="link_comments" title="评论次数"><a href="#comments" onclick="_gaq.push(['_trackEvent','function', 'onclick', 'blog_articles_pinglun'])">评论</a>(2)</span>
    <span class="link_collect"><a href="javascript:void(0);" onclick="javascript:collectArticle('Python源码分析3 – 词法分析器PyTokenizer','1439068');return false;" title="收藏">收藏</a></span>
    <span class="link_report"><a href="#report"  onclick="javascript:report(1439068,2);return false;" title="举报">举报</a></span>
    
</div>
<div class="tag2box"><a href='http://www.csdn.net/tag/python' target=_blank onclick="_gaq.push(['_trackEvent','function', 'onclick', 'blog_articles_tag']);">python</a><a href='http://www.csdn.net/tag/token' target=_blank onclick="_gaq.push(['_trackEvent','function', 'onclick', 'blog_articles_tag']);">token</a><a href='http://www.csdn.net/tag/whitespace' target=_blank onclick="_gaq.push(['_trackEvent','function', 'onclick', 'blog_articles_tag']);">whitespace</a><a href='http://www.csdn.net/tag/null' target=_blank onclick="_gaq.push(['_trackEvent','function', 'onclick', 'blog_articles_tag']);">null</a><a href='http://www.csdn.net/tag/struct' target=_blank onclick="_gaq.push(['_trackEvent','function', 'onclick', 'blog_articles_tag']);">struct</a><a href='http://www.csdn.net/tag/newline' target=_blank onclick="_gaq.push(['_trackEvent','function', 'onclick', 'blog_articles_tag']);">newline</a></div>

  

  
  
     

<div id="article_content" class="article_content">
<h1>Introduction </h1>
<p>上次我们分析了Python中执行程序可分为5个步骤： </p>
<ol>
    <li>Tokenizer进行词法分析，把源程序分解为Token </li>
    <li>Parser根据Token创建CST </li>
    <li>CST被转换为AST </li>
    <li>AST被编译为字节码 </li>
    <li>执行字节码 </li>
</ol>
<p>本文将介绍Python程序执行的第一步，也就是词法分析。词法分析简单来说就是把源程序的字符分解组合成Token。比如sum=0可以分解成3个token，'sum', '=', '0'。程序中的whitespace通常只作为分隔符用，最终会被忽略掉，因此没有出现在token的列表中。不过在Python之中，由于语法规则的关系，Tab/Space需要用来分析程序的缩进，因此Python中对于Whitespace的处理比一般C/C++编译器的处理会要稍微复杂一些。 </p>
<p>在Python中词法分析的实现在Parser目录下的tokenizer.h和tokenizer.cpp。Python的其他部分会直接调用tokenizer.h中定义的函数，如下： </p>
<div>
<table style="BACKGROUND: #d9d9d9; BORDER-COLLAPSE: collapse" border="0">
    <colgroup><col style="WIDTH: 590px"></col></colgroup>
    <tbody valign="top">
        <tr>
            <td>
            <p><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">extern struct tok_state *PyTokenizer_FromString(const char *); <br /></span><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">extern struct tok_state *PyTokenizer_FromFile(FILE *, char *, char *); <br /></span><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">extern void PyTokenizer_Free(struct tok_state *); <br /></span><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">extern int PyTokenizer_Get(struct tok_state *, char **, char **);</span></p>
            </td>
        </tr>
    </tbody>
</table>
</div>
<p>这些函数均以PyTokenizer开头。这是Python源代码中的一个约定。虽然Python是用C语言实现的，其实现方式借鉴了很多面对对象的思想。拿词法分析来说，这四个函数均可以看作PyTokenizer的成员函数。头两个函数PyTokenizer_FromXXXX可以看作是构造函数，返回PyTokenizer的instance。PyTokenizer对象内部状态，也就是成员变量，储存在tok_state之中。PyTokenizer_Free可以看作是析构函数，负责释放PyTokenizer，也就是tok_state所占用的内存。PyTokenizer_Get则是PyTokenizer的一个成员函数，负责取得在字符流中下一个Token。这两个函数均需要传入tok_state的指针，和C++中需要隐含传入this指针给成员函数的道理是一致的。可以看到，OO的思想其实是和语言无关的，即使是C这样的结构化的语言，也可以写出面对对象的程序。 </p>
<h1>tok_state </h1>
<p>tok_state等价于PyTokenizer这个class本身的状态，也就是内部的私有成员的集合。部分定义如下： </p>
<div>
<table style="BACKGROUND: #d9d9d9; BORDER-COLLAPSE: collapse" border="0">
    <colgroup><col style="WIDTH: 590px"></col></colgroup>
    <tbody valign="top">
        <tr>
            <td>
            <p><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">/* Tokenizer state */ <br /></span><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">struct tok_state { <br /></span><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">/* Input state; buf &lt;= cur &lt;= inp &lt;= end */ <br /></span><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">/* NB an entire line is held in the buffer */&nbsp;<br /></span><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">&nbsp;&nbsp;&nbsp;&nbsp;char *buf;&nbsp;&nbsp;&nbsp;&nbsp;/* Input buffer, or NULL; malloc'ed if fp != NULL */&nbsp;<br /></span><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">&nbsp;&nbsp;&nbsp;&nbsp;char *cur;&nbsp;&nbsp;&nbsp;&nbsp;/* Next character in buffer */&nbsp;<br /></span><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">&nbsp;&nbsp;&nbsp;&nbsp;char *inp;&nbsp;&nbsp;&nbsp;&nbsp;/* End of data in buffer */&nbsp;<br /></span><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">&nbsp;&nbsp;&nbsp;&nbsp;char *end;&nbsp;&nbsp;&nbsp;&nbsp;/* End of input buffer if buf != NULL */&nbsp;<br /></span><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">&nbsp;&nbsp;&nbsp;&nbsp;char *start;&nbsp;&nbsp;&nbsp;&nbsp;/* Start of current token if not NULL */&nbsp;<br /></span><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">&nbsp;&nbsp;&nbsp;&nbsp;int done;&nbsp;&nbsp;&nbsp;&nbsp;/* E_OK normally, E_EOF at EOF, otherwise error code&nbsp;<br /></span><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">&nbsp;&nbsp;&nbsp;&nbsp;/* NB If done != E_OK, cur must be == inp!!! */&nbsp;<br /></span><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">&nbsp;&nbsp;&nbsp;&nbsp;FILE *fp;&nbsp;&nbsp;&nbsp;&nbsp;/* Rest of input; NULL if tokenizing a string */&nbsp;<br /></span><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">&nbsp;&nbsp;&nbsp;&nbsp;int tabsize;&nbsp;&nbsp;&nbsp;&nbsp;/* Tab spacing */&nbsp;<br /></span><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">&nbsp;&nbsp;&nbsp;&nbsp;int indent;&nbsp;&nbsp;&nbsp;&nbsp;/* Current indentation index */&nbsp;<br /></span><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">&nbsp;&nbsp;&nbsp;&nbsp;int indstack[MAXINDENT];&nbsp;&nbsp;&nbsp;&nbsp;/* Stack of indents */&nbsp;<br /></span><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">&nbsp;&nbsp;&nbsp;&nbsp;int atbol;&nbsp;&nbsp;&nbsp;&nbsp;/* Nonzero if at begin of new line */&nbsp;<br /></span><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">&nbsp;&nbsp;&nbsp;&nbsp;int pendin;&nbsp;&nbsp;&nbsp;&nbsp;/* Pending indents (if &gt; 0) or dedents (if &lt; 0) */&nbsp;<br /></span><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">&nbsp;&nbsp;&nbsp;&nbsp;char *prompt, *nextprompt;&nbsp;&nbsp;&nbsp;&nbsp;/* For interactive prompting */&nbsp;<br /></span><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">&nbsp;&nbsp;&nbsp;&nbsp;int lineno;&nbsp;&nbsp;&nbsp;&nbsp;/* Current line number */&nbsp;<br /></span><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">&nbsp;&nbsp;&nbsp;&nbsp;int level;&nbsp;&nbsp;&nbsp;&nbsp;/* () [] {} Parentheses nesting level */&nbsp;<br /></span><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Used to allow free continuations inside them */ <br /></span><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">};</span></p>
            </td>
        </tr>
        <tr>
            <td>&nbsp;</td>
        </tr>
    </tbody>
</table>
</div>
<p>最重要的是buf, cur, inp, end, start。这些field直接决定了缓冲区的内容： </p>
<p>buf是缓冲区的开始。假如PyTokenizer处于字符串模式，那么buf指向字符串本身，否则，指向文件读入的缓冲区。<br />cur指向缓冲区中下一个字符。<br />inp指向缓冲区中有效数据的结束位置。PyTokenizer是以行为单位进行处理的，每一行的内容存入从buf到inp之间，包括/n。一般情况下 ，PyTokenizer会直接从缓冲区中取下一个字符，一旦到达inp所指向的位置，就会准备取下一行。当PyTokenizer处于不同模式下面，具体的行为会稍有不同。<br />end是缓冲区的结束，在字符串模式下没有用到。<br />start指向当前token的开始位置，如果现在还没有开始分析token，start为NULL。 </p>
<h1>PyTokenzer_FromString &amp; PyTokenizer_FromFile </h1>
<p>PyTokenizer_FromString &amp; PyTokenizer_FromFile可以说是PyTokenizer的构造函数。从这两个函数的命名可以看出，PyTokenizer支持两种模式：字符串和文件。由于标准输入STDIN也可以看作是文件，因此实际上PyTokenizer支持3种模式：字符串，交互，文件。 </p>
<p>PyTokenizer_FromFile的实现和PyTokenizer_FromString的实现大致相同。后者的实现如下： </p>
<div>
<table style="BACKGROUND: #d9d9d9; BORDER-COLLAPSE: collapse" border="0">
    <colgroup><col style="WIDTH: 590px"></col></colgroup>
    <tbody valign="top">
        <tr>
            <td>
            <p><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">/* Set up tokenizer for string */&nbsp;<br /></span><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">struct tok_state * <br /></span><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">PyTokenizer_FromString(const char *str) <br /></span><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">{&nbsp;<br /></span><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">&nbsp;&nbsp;&nbsp;&nbsp;struct tok_state *tok = tok_new();&nbsp;<br /></span><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">&nbsp;&nbsp;&nbsp;&nbsp;if (tok == NULL)&nbsp;<br /></span><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return NULL;&nbsp;<br /></span><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">&nbsp;&nbsp;&nbsp;&nbsp;str = (char *)decode_str(str, tok);&nbsp;<br /></span><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">&nbsp;&nbsp;&nbsp;&nbsp;if (str == NULL) {&nbsp;<br /></span><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PyTokenizer_Free(tok);&nbsp;<br /></span><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return NULL;&nbsp;<br /></span><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<br /></span><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">&nbsp;&nbsp;&nbsp;&nbsp;/* XXX: constify members. */&nbsp;<br /></span><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">&nbsp;&nbsp;&nbsp;&nbsp;tok-&gt;buf = tok-&gt;cur = tok-&gt;end = tok-&gt;inp = (char*)str;&nbsp;<br /></span><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">&nbsp;&nbsp;&nbsp;&nbsp;return tok; <br /></span><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">}<br /></span></p>
            </td>
        </tr>
    </tbody>
</table>
</div>
<p>直接调用tok_new返回一个tok_state的instance，后面的decode_str负责对str进行解码，然后赋给tok-&gt;buf/cur/end/inp。 </p>
<h1>PyTokenizer_Get </h1>
<p>下面我们来分析一下PyTokenizer_Get函数。该函数的作用是在PyTokenizer所绑定的字符流（可以是字符串也可以是文件）中取出下一个token，比如sum=0刚取到了'sum'，那么下一个取到的就是'='。一个返回的token由两部分参数描述，一个是表示token类型的int，一个是token的具体内容，也就是一个字符串。Python会把不同token分为若干种类型，这些不同的类型定义在include/token.h里面以宏的形式存在，如NAME，NUMBER，STRING，NEWLINE等。举例来说，'sum'这个token可以表示成(NAME, 'sum')。NAME是类型，表明sum是一个名称（注意请和字符串区分开）。此时Python并不判定该名称是关键字还是标识符，一律统称为NAME。而这个NAME的内容是'sum'。PyTokenizer_Get返回的int便是token的类型，而两个参数char **p_start, char **p_end是输出参数，指向token在PyTokenizer内部缓冲区中的位置。这里采用返回一个p_start和p_end的意图是避免构造一份token内容的copy，而是直接给出token在缓冲区中的开始和结束的位置。这样做显然是为了提高效率。 </p>
<p>PyTokenizer_Get的实现如下，直接调用tok_get函数： </p>
<div>
<table style="BACKGROUND: #d9d9d9; BORDER-COLLAPSE: collapse" border="0">
    <colgroup><col style="WIDTH: 590px"></col></colgroup>
    <tbody valign="top">
        <tr>
            <td>
            <p><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">Int <br /></span><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">PyTokenizer_Get(struct tok_state *tok, char **p_start, char **p_end) <br /></span><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">{&nbsp;<br /></span><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">&nbsp;&nbsp;&nbsp;&nbsp;int result = tok_get(tok, p_start, p_end);&nbsp;<br /></span><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">&nbsp;&nbsp;&nbsp;&nbsp;if (tok-&gt;decoding_erred) {&nbsp;<br /></span><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;result = ERRORTOKEN;&nbsp;<br /></span><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tok-&gt;done = E_DECODE;&nbsp;<br /></span><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<br /></span><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">&nbsp;&nbsp;&nbsp;&nbsp;return result; <br /></span><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">}</span></p>
            </td>
        </tr>
    </tbody>
</table>
</div>
<p>tok_get负责以下几件事情： </p>
<h2>1. 处理缩进 </h2>
<p>缩进的处理只在一行开始的时候。如果tok_state::atbol(at beginning of line)非0，说明当前处于一行的开始，否则不做处理。 </p>
<div>
<table style="BACKGROUND: #d9d9d9; BORDER-COLLAPSE: collapse" border="0">
    <colgroup><col style="WIDTH: 590px"></col></colgroup>
    <tbody valign="top">
        <tr>
            <td>
            <div><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">&nbsp;&nbsp;&nbsp;&nbsp;/* Get indentation level */ </span></div>
            <div><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">&nbsp;&nbsp;&nbsp;&nbsp;if (tok-&gt;atbol) { </span></div>
            <div><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;register int col = 0; </span></div>
            <div><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;register int altcol = 0; </span></div>
            <div><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tok-&gt;atbol = 0; </span></div>
            <div><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (;;) { </span></div>
            <div><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;c = tok_nextc(tok); </span></div>
            <div><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (c == ' ') </span></div>
            <div><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;col++, altcol++; </span></div>
            <div><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (c == '/t') { </span></div>
            <div><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;col = (col/tok-&gt;tabsize + 1) * tok-&gt;tabsize; </span></div>
            <div><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;altcol = (altcol/tok-&gt;alttabsize + 1) </span></div>
            <div><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* tok-&gt;alttabsize; </span></div>
            <div><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} </span></div>
            <div><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (c == '/014') /* Control-L (formfeed) */ </span></div>
            <div><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;col = altcol = 0; /* For Emacs users */ </span></div>
            <div><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else </span></div>
            <div><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break; </span></div>
            <div><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} </span></div>
            <div><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tok_backup(tok, c); </span></div>
            </td>
        </tr>
    </tbody>
</table>
</div>
<p>上面的代码负责计算缩进了多少列。由于tab键可能有多种设定，PyTokenizer对tab键有两套处理方案：tok-&gt;tabsize保存着&quot;标准&quot;的tab的大小，缺省为8（一般不要修改此值）。Tok-&gt;alttabsize保存着另外的tab大小，缺省在tok_new中初始化为1。col和altcol保存着在两种不同tab设置之下的列数，遇到空格+1，遇到/t则跳到下一个tabstop，直到遇到其他字符为止。 </p>
<div>
<table style="BACKGROUND: #d9d9d9; BORDER-COLLAPSE: collapse" border="0">
    <colgroup><col style="WIDTH: 590px"></col></colgroup>
    <tbody valign="top">
        <tr>
            <td>
            <div><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (c == '#' || c == '/n') { </span></div>
            <div><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Lines with only whitespace and/or comments </span></div>
            <div><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; shouldn't affect the indentation and are </span></div>
            <div><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; not passed to the parser as NEWLINE tokens, </span></div>
            <div><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; except *totally* empty lines in interactive </span></div>
            <div><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mode, which signal the end of a command group. */ </span></div>
            <div><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (col == 0 &amp;&amp; c == '/n' &amp;&amp; tok-&gt;prompt != NULL) </span></div>
            <div><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;blankline = 0; /* Let it through */ </span></div>
            <div><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else </span></div>
            <div><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;blankline = 1; /* Ignore completely */ </span></div>
            <div><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* We can't jump back right here since we still </span></div>
            <div><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; may need to skip to the end of a comment */ </span></div>
            <div><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} </span></div>
            </td>
        </tr>
    </tbody>
</table>
</div>
<p>接下来，如果遇到了注释或者是空行，则不加以处理，直接跳过，这样做是避免影响缩进。唯一的例外是在交互模式下的完全的空行（只有一个换行符）需要被处理，因为在交互模式下空行意味着一组语句将要结束，而在非交互模式下完全的空行是要被直接忽略掉的。 </p>
<div>
<table style="BACKGROUND: #d9d9d9; BORDER-COLLAPSE: collapse" border="0">
    <colgroup><col style="WIDTH: 590px"></col></colgroup>
    <tbody valign="top">
        <tr>
            <td>
            <div><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!blankline &amp;&amp; tok-&gt;level == 0) { </span></div>
            <div><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (col == tok-&gt;indstack[tok-&gt;indent]) { </span></div>
            <div><span style="FONT-SIZE: 10pt"><span style="FONT-FAMILY: Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// </span><span style="FONT-FAMILY: 宋体">情况</span><span style="FONT-FAMILY: Courier New">1</span><span style="FONT-FAMILY: 宋体">：</span><span style="FONT-FAMILY: Courier New">col=</span><span style="FONT-FAMILY: 宋体">当前缩进，不变</span><span style="FONT-FAMILY: Courier New"> </span></span></div>
            <div><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} </span></div>
            <div><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (col &gt; tok-&gt;indstack[tok-&gt;indent]) { </span></div>
            <div><span style="FONT-SIZE: 10pt"><span style="FONT-FAMILY: Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// </span><span style="FONT-FAMILY: 宋体">情况</span><span style="FONT-FAMILY: Courier New">2</span><span style="FONT-FAMILY: 宋体">：</span><span style="FONT-FAMILY: Courier New">col&gt;</span><span style="FONT-FAMILY: 宋体">当前缩进，进栈</span><span style="FONT-FAMILY: Courier New"> </span></span></div>
            <div><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tok-&gt;pendin++; </span></div>
            <div><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tok-&gt;indstack[++tok-&gt;indent] = col; </span></div>
            <div><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tok-&gt;altindstack[tok-&gt;indent] = altcol; </span></div>
            <div><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} </span></div>
            <div><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else /* col &lt; tok-&gt;indstack[tok-&gt;indent] */ { </span></div>
            <div><span style="FONT-SIZE: 10pt"><span style="FONT-FAMILY: Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// </span><span style="FONT-FAMILY: 宋体">情况</span><span style="FONT-FAMILY: Courier New">3</span><span style="FONT-FAMILY: 宋体">：</span><span style="FONT-FAMILY: Courier New">col&lt;</span><span style="FONT-FAMILY: 宋体">当前缩进，退栈</span><span style="FONT-FAMILY: Courier New"> </span></span></div>
            <div><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while (tok-&gt;indent &gt; 0 &amp;&amp; </span></div>
            <div><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;col &lt; tok-&gt;indstack[tok-&gt;indent]) { </span></div>
            <div><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tok-&gt;pendin--; </span></div>
            <div><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tok-&gt;indent--; </span></div>
            <div><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} </span></div>
            <div><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} </span></div>
            <div><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</span></div>
            </td>
        </tr>
    </tbody>
</table>
</div>
<p>最后，根据col和当前indstack的栈顶（也就是当前缩进的位置），确定是哪一种情况，具体请参看上面的代码。上面的代码有所删减，去掉了一些错误处理，加上了一点注释。需要说明的是PyTokenizer维护两个栈indstack &amp; altindstack，分别对应col和altcol，保存着缩进的位置，而tok-&gt;indent保存着栈顶。 </p>
<h2>2. 跳过whitespace和注释 </h2>
<p>代码很简单，在此不做说明。 </p>
<h2>3. 确定token</h2>
<p>反复调用tok_nextc，获得下一个字符，依据字符内容判定是何种token，然后加以返回。具体的过程比较长，但是logic还是比较简单的。 </p>
<p>下面举一个处理标识符（变量和关键字）的例子 </p>
<div>
<table style="BACKGROUND: #d9d9d9; BORDER-COLLAPSE: collapse" border="0">
    <colgroup><col style="WIDTH: 590px"></col></colgroup>
    <tbody valign="top">
        <tr>
            <td>
            <div><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">&nbsp;&nbsp;&nbsp;&nbsp;/* Identifier (most frequent token!) */ </span></div>
            <div><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">&nbsp;&nbsp;&nbsp;&nbsp;if (isalpha(c) || c == '_') { </span></div>
            <div><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Process r&quot;&quot;, u&quot;&quot; and ur&quot;&quot; */ </span></div>
            <div><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;switch (c) { </span></div>
            <div><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case 'r': </span></div>
            <div><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case 'R': </span></div>
            <div><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;c = tok_nextc(tok); </span></div>
            <div><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (c == '&quot;' || c == '/'') </span></div>
            <div><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;goto letter_quote; </span></div>
            <div><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break; </span></div>
            <div><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case 'u': </span></div>
            <div><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case 'U': </span></div>
            <div><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;c = tok_nextc(tok); </span></div>
            <div><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (c == 'r' || c == 'R') </span></div>
            <div><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;c = tok_nextc(tok); </span></div>
            <div><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (c == '&quot;' || c == '/'') </span></div>
            <div><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;goto letter_quote; </span></div>
            <div><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break; </span></div>
            <div><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} </span></div>
            <div><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while (isalnum(c) || c == '_') { </span></div>
            <div><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;c = tok_nextc(tok); </span></div>
            <div><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} </span></div>
            <div><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tok_backup(tok, c); </span></div>
            <div><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*p_start = tok-&gt;start; </span></div>
            <div><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*p_end = tok-&gt;cur; </span></div>
            <div><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return NAME; </span></div>
            <div><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">&nbsp;&nbsp;&nbsp;&nbsp;}</span></div>
            </td>
        </tr>
    </tbody>
</table>
</div>
<p>假如当前字符是字母或者是下划线，则开始当作标示符进行分析，否则，继续执行下面的语句，处理其他的可能性。不过还有一种可能性，Python中字符串可以是用r或者u开头，比如r&quot;string&quot;, u&quot;string&quot;。r代表raw string，u代表unicode string。一旦遇到了r或者u的情况下，直接跳转到letter_quote标号处，开始作为字符串进行分析。如果不是r/u，反复拿到下一个字符直到下一个字符不是字母，数字或者下划线为止。由于最后一次拿到的字符不属于当前标示符，应该被放到下一次进行分析，因此调用tok_backup把字符c回送到缓冲区中，类似ungetch()。最后，设置好p_start &amp; p_end，返回NAME。这样，返回的结果表明下一个token是NAME，开始于p_start，结束于p_end。 </p>
<h1>tok_nextc </h1>
<p>tok_nextc负责从缓冲区中取出下一个字符，可以说是整个PyTokenizer的最核心的部分。 </p>
<div>
<table style="BACKGROUND: #d9d9d9; BORDER-COLLAPSE: collapse" border="0">
    <colgroup><col style="WIDTH: 590px"></col></colgroup>
    <tbody valign="top">
        <tr style="HEIGHT: 345px">
            <td>
            <div><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">/* Get next char, updating state; error code goes into tok-&gt;done */ </span></div>
            <div>&nbsp;</div>
            <div><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">static int </span></div>
            <div><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">tok_nextc(register struct tok_state *tok) </span></div>
            <div><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">{ </span></div>
            <div><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">&nbsp;&nbsp;&nbsp;&nbsp;for (;;) { </span></div>
            <div><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (tok-&gt;cur != tok-&gt;inp) { </span></div>
            <div><span style="FONT-SIZE: 10pt"><span style="FONT-FAMILY: Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// cur</span><span style="FONT-FAMILY: 宋体">没有移动到</span><span style="FONT-FAMILY: Courier New">inp</span><span style="FONT-FAMILY: 宋体">，直接返回</span><span style="FONT-FAMILY: Courier New">*tok-&gt;cur++ </span></span></div>
            <div><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return Py_CHARMASK(*tok-&gt;cur++); /* Fast path */ </span></div>
            <div><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} </span></div>
            <div><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (tok-&gt;fp == NULL) { </span></div>
            <div><span style="FONT-SIZE: 10pt"><span style="FONT-FAMILY: Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// </span><span style="FONT-FAMILY: 宋体">字符串模式</span><span style="FONT-FAMILY: Courier New"> </span></span></div>
            <div><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} </span></div>
            <div><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (tok-&gt;prompt != NULL) { </span></div>
            <div><span style="FONT-SIZE: 10pt"><span style="FONT-FAMILY: Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// </span><span style="FONT-FAMILY: 宋体">交互模式</span><span style="FONT-FAMILY: Courier New"> </span></span></div>
            <div><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} </span></div>
            <div><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else { </span></div>
            <div><span style="FONT-SIZE: 10pt"><span style="FONT-FAMILY: Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// </span><span style="FONT-FAMILY: 宋体">磁盘文件模式</span><span style="FONT-FAMILY: Courier New"> </span></span></div>
            <div><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} </span></div>
            <div><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">&nbsp;&nbsp;&nbsp;&nbsp;} </span></div>
            <div><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">} </span></div>
            </td>
        </tr>
    </tbody>
</table>
</div>
<p>大部分情况，tok_nextc会直接返回*tok-&gt;cur++，直到tok-&gt;cur移动到达tok-&gt;inp。一旦tok-&gt;cur==tok-&gt;inp，tok_nextc会读入下一行。根据PyTokenizer处于模式的不同，处理方式会不太一样： </p>
<h2>1. 字符串模式 </h2>
<p>字符串的处理是最简单的一种情况，如下： </p>
<div>
<table style="BACKGROUND: #d9d9d9; BORDER-COLLAPSE: collapse" border="0">
    <colgroup><col style="WIDTH: 590px"></col></colgroup>
    <tbody valign="top">
        <tr>
            <td>
            <div><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;char *end = strchr(tok-&gt;inp, '/n'); </span></div>
            <div><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (end != NULL) </span></div>
            <div><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;end++; </span></div>
            <div><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else { </span></div>
            <div><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;end = strchr(tok-&gt;inp, '/0'); </span></div>
            <div><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (end == tok-&gt;inp) { </span></div>
            <div><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tok-&gt;done = E_EOF; </span></div>
            <div><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return EOF; </span></div>
            <div><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} </span></div>
            <div><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} </span></div>
            <div><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (tok-&gt;start == NULL) </span></div>
            <div><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tok-&gt;buf = tok-&gt;cur; </span></div>
            <div><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tok-&gt;line_start = tok-&gt;cur; </span></div>
            <div><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tok-&gt;lineno++; </span></div>
            <div><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tok-&gt;inp = end; </span></div>
            <div><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return Py_CHARMASK(*tok-&gt;cur++); </span></div>
            </td>
        </tr>
    </tbody>
</table>
</div>
<p>尝试获得下一行的末尾处作为新的inp，否则，说明下一行结尾处没有/n换行符（说明这是最后一行）或者当前行就是最后一行。在前者的情况下，inp就是字符串/0的位置，否则，返回EOF。当获得了下一行之后，返回下一个字符Py_CHARMASK(*tok-&gt;cur++)。 </p>
<p>&nbsp;</p>
<h2>2. 交互模式 </h2>
<p>代码如下： </p>
<div>
<table style="BACKGROUND: #d9d9d9; BORDER-COLLAPSE: collapse" border="0">
    <colgroup><col style="WIDTH: 583px"></col></colgroup>
    <tbody valign="top">
        <tr>
            <td colspan="2">
            <div>&nbsp;</div>
            <div><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;char *newtok = PyOS_Readline(stdin, stdout, tok-&gt;prompt); </span></div>
            <div><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (tok-&gt;nextprompt != NULL) </span></div>
            <div><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tok-&gt;prompt = tok-&gt;nextprompt; </span></div>
            <div><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (newtok == NULL) </span></div>
            <div><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tok-&gt;done = E_INTR; </span></div>
            <div><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (*newtok == '/0') { </span></div>
            <div><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PyMem_FREE(newtok); </span></div>
            <div><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tok-&gt;done = E_EOF; </span></div>
            <div><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} </span></div>
            <div><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">#if !defined(PGEN) &amp;&amp; defined(Py_USING_UNICODE) </span></div>
            <div><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (tok_stdin_decode(tok, &amp;newtok) != 0) </span></div>
            <div><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PyMem_FREE(newtok); </span></div>
            <div><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">#endif </span></div>
            <div><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (tok-&gt;start != NULL) { </span></div>
            <div><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;size_t start = tok-&gt;start - tok-&gt;buf; </span></div>
            <div><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;size_t oldlen = tok-&gt;cur - tok-&gt;buf; </span></div>
            <div><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;size_t newlen = oldlen + strlen(newtok); </span></div>
            <div><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;char *buf = tok-&gt;buf; </span></div>
            <div><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf = (char *)PyMem_REALLOC(buf, newlen+1); </span></div>
            <div><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tok-&gt;lineno++; </span></div>
            <div><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (buf == NULL) { </span></div>
            <div><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PyMem_FREE(tok-&gt;buf); </span></div>
            <div><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tok-&gt;buf = NULL; </span></div>
            <div><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PyMem_FREE(newtok); </span></div>
            <div><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tok-&gt;done = E_NOMEM; </span></div>
            <div><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return EOF; </span></div>
            <div><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} </span></div>
            <div><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tok-&gt;buf = buf; </span></div>
            <div><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tok-&gt;cur = tok-&gt;buf + oldlen; </span></div>
            <div><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tok-&gt;line_start = tok-&gt;cur; </span></div>
            <div><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;strcpy(tok-&gt;buf + oldlen, newtok); </span></div>
            <div><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PyMem_FREE(newtok); </span></div>
            <div><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tok-&gt;inp = tok-&gt;buf + newlen; </span></div>
            <div><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tok-&gt;end = tok-&gt;inp + 1; </span></div>
            <div><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tok-&gt;start = tok-&gt;buf + start; </span></div>
            <div><span style="FONT-SIZE: 10pt; FONT-FAMILY: Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</span></div>
            </td>
        </tr>
    </tbody>
</table>
</div>
<p>首先调用PyOs_Readline，获得下一行。注意newtok所对应的内存是被malloc出来的，最后需要free。由于在交互模式下，第一句话的prompt是&gt;&gt;&gt;，保存在tok-&gt;prompt中。从第二句开始提示符是...，保存在tok-&gt;nextprompt中，因此需要设置tok-&gt;prompt = tok-&gt;nextprompt。最后一个else if (tok-&gt;start != NULL)的作用是，一旦当读入下一行的时候，当前token还没有结束（一个典型的例子是长字符串&quot;&quot;&quot;可以跨越多行），由于buf原来的内容不能丢弃，下一行的内容必须加到buf的末尾，。PyTokenizer的做法是调用realloc改变buf的大小，然后把下一行的内容strcpy到buf的末尾。这样做虽然效率不高，由于一般情况下此种情况发生并不频繁，而且是处于交互模式下，因此性能上面没有问题。</p>
<h2>3. 文件模式 </h2>
<p>文件模式下的处理比上面两种模式都复杂。主要原因是文件模式下一行可能比BUFSIZE大很多，因此一旦BUFSIZE不够容纳一整行的话，必须反复读入，realloc缓冲区buf，然后把刚刚读入的内容append到buf的末尾，直到遇到行结束符为止。如果tok-&gt;start != NULL，说明当前正在读入token之中，同样的当前的buf不能丢弃，因此读入的新一行的内容同样也要append到buf的末尾，否则，新一行的内容直接读入到buf中。由于代码比较多，这里就不给出了。&nbsp;&nbsp;<span style="mso-fareast-font-family: 宋体; mso-fareast-theme-font: minor-fareast"><o:p>&nbsp;</o:p></span><span style="mso-fareast-font-family: 宋体; mso-fareast-theme-font: minor-fareast"><o:p><span style="mso-fareast-font-family: 宋体; mso-fareast-theme-font: minor-fareast"><o:p></o:p></span></o:p></span></p>
<div style="BORDER-RIGHT: medium none; PADDING-RIGHT: 0in; BORDER-TOP: medium none; PADDING-LEFT: 0in; PADDING-BOTTOM: 2pt; BORDER-LEFT: medium none; PADDING-TOP: 0in; BORDER-BOTTOM: #4f81bd 1pt solid; mso-element: para-border-div; mso-border-bottom-themecolor: accent1">
<p class="underline" style="MARGIN: 2pt 0in 0pt"><o:p><font face="Calibri" size="1">&nbsp;</font></o:p></p>
</div>
<p class="MsoNormal" style="MARGIN: 0in 0in 10pt"><strong style="mso-bidi-font-weight: normal"><span lang="ZH-CN" style="FONT-SIZE: 9pt; FONT-FAMILY: 宋体; mso-ascii-font-family: Arial; mso-bidi-font-family: Arial; mso-ansi-language: EN-US; mso-fareast-language: ZH-CN; mso-bidi-language: AR-SA">作者</span></strong><span style="FONT-SIZE: 9pt; FONT-FAMILY: &quot;Arial&quot;,&quot;sans-serif&quot;; mso-fareast-font-family: 宋体; mso-ansi-language: EN-US; mso-fareast-language: ZH-CN; mso-bidi-language: AR-SA">: <span style="mso-tab-count: 1">&nbsp;&nbsp;&nbsp;&nbsp; </span>ATField<br /><strong style="mso-bidi-font-weight: normal">E-Mail:</strong> <span style="mso-tab-count: 1">&nbsp; </span><a href="mailto:atfield_zhang@hotmail.com">atfield_zhang@hotmail.com</a><br /><strong style="mso-bidi-font-weight: normal">Blog</strong>: <span style="mso-tab-count: 1">&nbsp;&nbsp;&nbsp;&nbsp; </span></span><span style="FONT-SIZE: 9pt; FONT-FAMILY: &quot;Arial&quot;,&quot;sans-serif&quot;; mso-fareast-font-family: Arial; mso-bidi-font-family: 'Times New Roman'; mso-bidi-font-size: 10.0pt; mso-bidi-theme-font: minor-bidi; mso-ansi-language: EN-US; mso-fareast-language: ZH-CN; mso-bidi-language: AR-SA"><a href="http://blog.csdn.net/atfield"><span style="mso-fareast-font-family: 宋体; mso-bidi-font-family: Arial; mso-bidi-font-size: 9.0pt">http://blog.csdn.net/atfield</span></a></span></p>    
        <div  style="padding-top:20px">         
            <p  style="font-size:12px;" >版权声明：本文为博主原创文章，未经博主允许不得转载。</p>
        </div>
</div>




<!-- Baidu Button BEGIN -->




<div class="bdsharebuttonbox" style="float: right;">
<a href="#" class="bds_more" data-cmd="more" style="background-position:0 0 !important; background-image: url(http://bdimg.share.baidu.com/static/api/img/share/icons_0_16.png?v=d754dcc0.png) !important"></a>
<a href="#" class="bds_qzone" data-cmd="qzone" title="分享到QQ空间"  style="background-position:0 -52px !important"></a>
<a href="#" class="bds_tsina" data-cmd="tsina" title="分享到新浪微博"style="background-position:0 -104px !important"></a>
<a href="#" class="bds_tqq" data-cmd="tqq" title="分享到腾讯微博"style="background-position:0 -260px !important"></a>
<a href="#" class="bds_renren" data-cmd="renren" title="分享到人人网"style="background-position:0 -208px !important"></a>
<a href="#" class="bds_weixin" data-cmd="weixin" title="分享到微信"style="background-position:0 -1612px !important" ></a>
</div>
<script>window._bd_share_config = { "common": { "bdSnsKey": {}, "bdText": "", "bdMini": "1", "bdMiniList": false, "bdPic": "", "bdStyle": "0", "bdSize": "16" }, "share": {} }; with (document) 0[(getElementsByTagName('head')[0] || body).appendChild(createElement('script')).src = 'http://bdimg.share.baidu.com/static/api/js/share.js?v=89860593.js?cdnversion=' + ~(-new Date() / 36e5)];</script>
<!-- Baidu Button END -->

   <link rel="stylesheet" href="http://static.blog.csdn.net/css/blog_detail.css" />

    
<!--172.16.140.11-->
<ul class="article_next_prev">
            <li class="prev_article"><span  onclick="_gaq.push(['_trackEvent','function', 'onclick', 'blog_articles_shangyipian']);location.href='/atfield/article/details/1439055';">上一篇</span><a href="/atfield/article/details/1439055" onclick="_gaq.push(['_trackEvent','function', 'onclick', 'blog_articles_shangyipian'])">ACM UVa 116 - Undirectional TSP的解法</a></li>
            <li class="next_article"><span onclick="_gaq.push(['_trackEvent','function', 'onclick', 'blog_articles_xiayipian']);location.href='/atfield/article/details/1457035';">下一篇</span><a href="/atfield/article/details/1457035" onclick="_gaq.push(['_trackEvent','function', 'onclick', 'blog_articles_xiayipian'])">Python源码分析4 – Grammar文件和语法分析</a></li>
</ul>

<!-- Baidu Button BEGIN -->
<script type="text/javascript" id="bdshare_js" data="type=tools&amp;uid=1536434" ></script>
<script type="text/javascript" id="bdshell_js"></script>
<script type="text/javascript">
    document.getElementById("bdshell_js").src = "http://bdimg.share.baidu.com/static/js/shell_v2.js?cdnversion=" + Math.ceil(new Date()/3600000)
</script>
<!-- Baidu Button END -->

 

      
</div>
<div id="suggest"></div>
         <script  language="javascript" type='text/javascript'>     
             $(function(){
                 $.get("/ATField/svc/GetSuggestContent/1439068",function(data){
                     $("#suggest").html(data);
                 });     
             });             
         </script>  


<style>
.blog-ass-articl dd {
color: #369;
width: 99%; /*修改行*/
float: left;
overflow: hidden;
font: normal normal 12px/23px "SimSun";
height: 23px;
margin: 0;
padding: 0 0 0 10px;
margin-right: 30px;
background: url(http://static.blog.csdn.net/skin/default/images/blog-dot-red3.gif) no-repeat 0 10px;
}
</style>

<dl class="blog-ass-articl" id="res-relatived" > 
     <dt><span>猜你在找</span></dt>    


   


    <div id="adCollege" style="width: 42%;float: left;"> 
        <script src="http://csdnimg.cn/jobreco/job_reco.js" type="text/javascript"></script> 
        <script type="text/javascript">
            csdn.position.showEdu({
                sourceType: "blog",
                searchType: "detail",
                searchKey: "1439068",
                username: "",
                recordcount: "5",
                containerId: "adCollege" //容器DIV的id。 
            });
        </script> 
    </div>  

    
     <div id="res"  data-mod="popu_36"  class="tracking-ad" style="width: 42%;float: left;margin-right: 30px;"></div>
   
</dl>

<div id="job_blog_reco">
<script src="http://c.csdnimg.cn/jobreco/job_reco.js" type="text/javascript"></script>
   
     <script type="text/javascript">
         csdn.position.show({
         sourceType: "blog",
         tplType: "blogDetail",
         searchType: "detail",
         searchKey: "1439068",
             username: "",
         containerId: "job_blog_reco"
        }); 
    </script>

</div>

<script type="text/javascript">
    $(function () {
        setTimeout(function () {
            var searchtitletags = 'Python源码分析3 – 词法分析器PyTokenizer' + ',' + $("#tags").html();
            searchService({
                index: 'blog',
                query: searchtitletags,
                from: 5,
                size: 5,
                appendTo: '#res',
                url: 'recommend',
                his: 2,
                client: "blog_cf_enhance",
                tmpl: '<dd style="background:url(http://static.blog.csdn.net/skin/default/images/blog-dot-red3.gif) no-repeat 0 10px;"><a href="#{ url }" title="#{ title }" strategy="#{ strategy }">#{ title }</a></dd>'
            });
        }, 500);
    });    

 </script>   

    <div id="ad_cen">
   
          <script type="text/javascript">
              new Ad(4, 'ad_cen');
          </script>
    </div>
<div class="comment_class">
    <div id="comment_title" class="panel_head">
        <span class="see_comment">查看评论</span><a name="comments"></a></div>
    <div id="comment_list">
    </div>
    <div id="comment_bar">
    </div>
    <div id="comment_form">
    </div>

    <div class="announce">
        * 以上用户言论只代表其个人观点，不代表CSDN网站的观点或立场<a name="reply"></a><a name="quote"></a></div>
</div>

<script type="text/javascript">
    var fileName = '1439068';
    var commentscount = 2;
    var islock = false
</script>
<script type="text/javascript" src="http://static.blog.csdn.net/scripts/comment.js"></script>
    <div id="ad_bot">
    </div>
    <script type="text/javascript">
        setTimeout(function(){
            new Ad(5, 'ad_bot');
        },500);  
    </script>
<div id="report_dialog">
</div>

<div id="d-top"  style="bottom:60px;">
        <a id="quick-reply" class="btn btn-top q-reply" title="快速回复" style="display:none;">
            <img src="http://static.blog.csdn.net/images/blog-icon-reply.png" alt="快速回复">
        </a>    

    <a id="d-top-a" class="btn btn-top backtop"  style="display: none;" title="返回顶部" onclick="_gaq.push(['_trackEvent','function', 'onclick', 'blog_articles_huidaodingbu'])" style="">         
         <img src="http://static.blog.csdn.net/images/top.png" alt="TOP">
    </a>
</div>
<script type="text/javascript">
    $(function ()
    {
        $("#ad_frm_0").height("90px");
        
        setTimeout(function(){
            $("#ad_frm_2").height("200px");
        },1000);    
    });
  
</script>
<style type="text/css">
    .tag_list
    {
        background: none repeat scroll 0 0 #FFFFFF;
        border: 1px solid #D7CBC1;
        color: #000000;
        font-size: 12px;
        line-height: 20px;
        list-style: none outside none;
        margin: 10px 2% 0 1%;
        padding: 1px;
    }
    .tag_list h5
    {
        background: none repeat scroll 0 0 #E0DBD3;
        color: #47381C;
        font-size: 12px;
        height: 24px;
        line-height: 24px;
        padding: 0 5px;
        margin: 0;
    }
    .tag_list h5 a
    {
        color: #47381C;
    }
    .classify
    {
        margin: 10px 0;
        padding: 4px 12px 8px;
    }
    .classify a
    {
        margin-right: 20px;
        white-space: nowrap;
    }
</style>


<div class="tag_list" style="display:none"></div>
  <script  language="javascript" type='text/javascript'>     
      $(function(){
              setTimeout(function(){
                  $.get("/ATField/svc/GetTagContent",function(data){
                      $(".tag_list").html(data).show();
                  });     
              });
          },500);                       
 </script> 


<div id="pop_win" style="display:none ;position: absolute; z-index: 10000; border: 1px solid rgb(220, 220, 220); top: 222.5px; left: 630px; opacity: 1; background: none 0px 0px repeat scroll rgb(255, 255, 255);">
    
</div>
<div id="popup_mask"></div>
<style>
    #popup_mask
    {
        position: absolute;
        width: 100%;
        height: 100%;
        background: #000;
        z-index: 9999;
        left: 0px;
        top: 0px;
        opacity: 0.3;
        filter: alpha(opacity=30);
        display: none;
    }

</style>




<script type="text/javascript">
    $(function(){
        setTimeout(function(){
            $(".comment_body:contains('回复')").each(function(index,item){
                var u=$(this).text().split('：')[0].toString().replace("回复","")
                var thisComment=$(this);
                if(u)
                {
                    $.getJSON("https://passport.csdn.net/get/nick?callback=?", {users: u}, function(a) {
                        if(a!=null&&a.data!=null&&a.data.length>0)
                        {
                            nick=a.data[0].n; 
                            if(u!=nick)
                            {
                                thisComment.text(thisComment.text().replace(u,nick));  
                            }
                        }       
                    });  
                }
            });
        },200);  
        
        setTimeout(function(){
            $("a img[src='http://js.tongji.linezing.com/stats.gif']").parent().css({"position":"absolute","left":"50%"});
        },300);
    });

    function loginbox(){
        var $logpop=$("#pop_win");
        $logpop.html('<iframe src="https://passport.csdn.net/account/loginbox?service=http://static.blog.csdn.net/callback.htm" frameborder="0" height="600" width="400" scrolling="no"></iframe>');

        $('#popup_mask').css({
            opacity: 0.5,
            width: $( document ).width() + 'px',
            height:  $( document ).height() + 'px'
        });
        $('#popup_mask').css("display","block");
 
        $logpop.css( {
            top: ($( window ).height() - $logpop.height())/ 2  + $( window 
       ).scrollTop() + 'px',
            left:($( window ).width() - $logpop.width())/ 2
        } );
 
        setTimeout( function () {
            $logpop.show();
            $logpop.css( {
                opacity: 1
            } );
        }, 200 );
 
        $('#popup_mask').unbind("click");
        $('#popup_mask').bind("click", function(){
            $('#popup_mask').hide();
            var $clopop = $("#pop_win");
            $("#common_ask_div_sc").css("display","none");
            $clopop.css( {
                opacity: 0
            } );
            setTimeout( function () {
                $clopop.hide();
            }, 350 );
            return false;
        });
    }    

</script>
                        <div class="clear">
                        </div>
                    </div>                   
                
            </div>
                   
           <div id="side">
    <div class="side">
<div id="panel_Profile" class="panel">
<ul class="panel_head"><span>个人资料</span></ul>
<ul class="panel_body profile">
<div id="blog_userface">
    <a href="http://my.csdn.net/ATField" target="_blank">
    <img src="http://avatar.csdn.net/8/8/F/1_atfield.jpg" title="访问我的空间" style="max-width:90%"/>
    </a>
    <br />
    <span><a href="http://my.csdn.net/ATField" class="user_name" target="_blank">ATField</a></span>
</div>
<div class="interact">

    <a href="javascript:void(0);" class="attent" id="span_add_follow" title="[加关注]"></a>

 <a href="javascript:void(0);" class="letter"  title="[发私信]" onclick="window.open('http://msg.csdn.net/letters/model?receiver=ATField','_blank','height=350,width=700');_gaq.push(['_trackEvent','function', 'onclick', 'blog_articles_sixin'])"></a>  
</div>
<div id="blog_medal">
                       <div class="ico_expert"  onclick="javascript:location='http://blog.csdn.net/experts/rule.html'" title="CSDN认证专家" style="cursor:pointer;width:60px;height:60px;background:url('http://c.csdnimg.cn/jifen/images/xunzhang/xunzhang/bokezhuanjiamiddle.png') no-repeat" ></div>
                <div id="bms_box">
               </div>
</div>
<ul id="blog_rank">
    <li>访问：<span>538408次</span></li>
    <li>积分：<span>6696</span> </li>    
    <li >等级： <span style="position:relative;display:inline-block;z-index:1" >
            <img src="http://c.csdnimg.cn/jifen/images/xunzhang/jianzhang/blog6.png" alt="" style="vertical-align: middle;" id="leveImg">
            <div id="smallTittle" style=" position: absolute;  left: -24px;  top: 25px;  text-align: center;  width: 101px;  height: 32px;  background-color: #fff;  line-height: 32px;  border: 2px #DDDDDD solid;  box-shadow: 0px 2px 2px rgba (0,0,0,0.1);  display: none;   z-index: 999;">
            <div style="left: 42%;  top: -8px;  position: absolute;  width: 0;  height: 0;  border-left: 10px solid transparent;  border-right: 10px solid transparent;  border-bottom: 8px solid #EAEAEA;"></div>
            积分：6696 </div>
        </span>  </li>
    <li>排名：<span>第1532名</span></li>
</ul>
<ul id="blog_statistics">
    <li>原创：<span>118篇</span></li>
    <li>转载：<span>11篇</span></li>
    <li>译文：<span>1篇</span></li>
    <li>评论：<span>465条</span></li>
</ul>
</ul>
</div>


<div class="panel" id="panel_Search">
    <ul class="panel_head"><span>文章搜索</span></ul>
    <ul class="panel_body">
        <form id="frmSearch" action="http://so.csdn.net/search" class="form_search" target="_blank">
        <span><input id="inputSearch" type="text" class="blogsearch" title="请输入关键字" /></span>
        <input id="btnSubmit" type="button" value="搜索" title="search in blog" />
        <input type="hidden" name="q" id="inputQ" />
        <input type="hidden" name="t" value="blog" />
        <a id="btnSearchBlog" target="_blank"></a>
        </form>
    </ul>
</div>

<script type="text/javascript">
    $(function () {
        $("#btnSubmit").click(function () {           
            search();
        });

        $("#frmSearch").submit(function () {
            search();
            return false;
        });

        function search()
        {
            var url = "http://so.csdn.net/so/search/s.do?q=" + encodeURIComponent($("#inputSearch").val()) + "&u=" + username + "&t=blog";
            window.location.href = url;
        }   
    });
</script><div id="panel_Category" class="panel">
<ul class="panel_head"><span>文章分类</span></ul>
<ul class="panel_body">    
                 <li>
                    <a href="/ATField/article/category/75905" onclick="_gaq.push(['_trackEvent','function', 'onclick', 'blog_articles_wenzhangfenlei']); ">.NET</a><span>(25)</span>
                </li>
                 <li>
                    <a href="/ATField/article/category/269975" onclick="_gaq.push(['_trackEvent','function', 'onclick', 'blog_articles_wenzhangfenlei']); ">.NET / Rotor 源码分析</a><span>(7)</span>
                </li>
                 <li>
                    <a href="/ATField/article/category/256452" onclick="_gaq.push(['_trackEvent','function', 'onclick', 'blog_articles_wenzhangfenlei']); ">ACM和算法</a><span>(12)</span>
                </li>
                 <li>
                    <a href="/ATField/article/category/75906" onclick="_gaq.push(['_trackEvent','function', 'onclick', 'blog_articles_wenzhangfenlei']); ">C++</a><span>(4)</span>
                </li>
                 <li>
                    <a href="/ATField/article/category/158999" onclick="_gaq.push(['_trackEvent','function', 'onclick', 'blog_articles_wenzhangfenlei']); ">Compiler</a><span>(1)</span>
                </li>
                 <li>
                    <a href="/ATField/article/category/159000" onclick="_gaq.push(['_trackEvent','function', 'onclick', 'blog_articles_wenzhangfenlei']); ">Linux/UNIX</a><span>(9)</span>
                </li>
                 <li>
                    <a href="/ATField/article/category/280520" onclick="_gaq.push(['_trackEvent','function', 'onclick', 'blog_articles_wenzhangfenlei']); ">Mac OS X</a><span>(7)</span>
                </li>
                 <li>
                    <a href="/ATField/article/category/256448" onclick="_gaq.push(['_trackEvent','function', 'onclick', 'blog_articles_wenzhangfenlei']); ">Python源码分析</a><span>(6)</span>
                </li>
                 <li>
                    <a href="/ATField/article/category/479724" onclick="_gaq.push(['_trackEvent','function', 'onclick', 'blog_articles_wenzhangfenlei']); ">VS 2010 &amp;amp; .NET 4.0</a><span>(11)</span>
                </li>
                 <li>
                    <a href="/ATField/article/category/75907" onclick="_gaq.push(['_trackEvent','function', 'onclick', 'blog_articles_wenzhangfenlei']); ">Win32/COM</a><span>(17)</span>
                </li>
                 <li>
                    <a href="/ATField/article/category/529323" onclick="_gaq.push(['_trackEvent','function', 'onclick', 'blog_articles_wenzhangfenlei']); ">WinDbg</a><span>(2)</span>
                </li>
                 <li>
                    <a href="/ATField/article/category/79097" onclick="_gaq.push(['_trackEvent','function', 'onclick', 'blog_articles_wenzhangfenlei']); ">其他</a><span>(25)</span>
                </li>
</ul>
</div><div id="panel_Archive" class="panel">
<ul class="panel_head"><span>文章存档</span></ul>
<ul class="panel_body">
<div id="archive_list">
<!--归档统计-->
<li><a href="/ATField/article/month/2014/04">2014年04月</a><span>(1)</span></li><li><a href="/ATField/article/month/2009/09">2009年09月</a><span>(1)</span></li><li><a href="/ATField/article/month/2009/08">2009年08月</a><span>(3)</span></li><li><a href="/ATField/article/month/2009/06">2009年06月</a><span>(2)</span></li><li><a href="/ATField/article/month/2009/05">2009年05月</a><span>(2)</span></li><li><a href="/ATField/article/month/2009/04">2009年04月</a><span>(2)</span></li><li><a href="/ATField/article/month/2009/03">2009年03月</a><span>(4)</span></li><li><a href="/ATField/article/month/2009/02">2009年02月</a><span>(1)</span></li><li><a href="/ATField/article/month/2009/01">2009年01月</a><span>(2)</span></li><li><a href="/ATField/article/month/2008/12">2008年12月</a><span>(3)</span></li><li><a href="/ATField/article/month/2008/11">2008年11月</a><span>(7)</span></li><li><a href="/ATField/article/month/2008/10">2008年10月</a><span>(4)</span></li><li><a href="/ATField/article/month/2008/09">2008年09月</a><span>(3)</span></li><li><a href="/ATField/article/month/2008/06">2008年06月</a><span>(2)</span></li><li><a href="/ATField/article/month/2008/03">2008年03月</a><span>(2)</span></li><li><a href="/ATField/article/month/2008/02">2008年02月</a><span>(3)</span></li><li><a href="/ATField/article/month/2007/12">2007年12月</a><span>(1)</span></li><li><a href="/ATField/article/month/2007/11">2007年11月</a><span>(1)</span></li><li><a href="/ATField/article/month/2007/10">2007年10月</a><span>(10)</span></li><li><a href="/ATField/article/month/2007/08">2007年08月</a><span>(9)</span></li><li><a href="/ATField/article/month/2007/07">2007年07月</a><span>(1)</span></li><li><a href="/ATField/article/month/2007/06">2007年06月</a><span>(1)</span></li><li><a href="/ATField/article/month/2007/05">2007年05月</a><span>(7)</span></li><li><a href="/ATField/article/month/2007/04">2007年04月</a><span>(11)</span></li><li><a href="/ATField/article/month/2007/03">2007年03月</a><span>(23)</span></li><li><a href="/ATField/article/month/2007/02">2007年02月</a><span>(7)</span></li><li><a href="/ATField/article/month/2007/01">2007年01月</a><span>(10)</span></li><li><a href="/ATField/article/month/2006/12">2006年12月</a><span>(5)</span></li><li><a href="/ATField/article/month/2006/11">2006年11月</a><span>(3)</span></li>
</div>
</ul>
</div>
<div id="hotarticls" class="panel">
<ul class="panel_head">
    <span>       
阅读排行    </span>
</ul>

<ul class="panel_body itemlist">
<li>
<a href="/atfield/article/details/4493003" title="如果一个程序跑10000次只失败一次，你会怎么调试？">如果一个程序跑10000次只失败一次，你会怎么调试？</a><span>(26398)</span>
</li>
<li>
<a href="/atfield/article/details/4465227" title=".NET 4.0中的新功能介绍：契约式设计 (Design By Contracts)">.NET 4.0中的新功能介绍：契约式设计 (Design By Contracts)</a><span>(18696)</span>
</li>
<li>
<a href="/atfield/article/details/1750890" title=".NET中的幕后英雄：MSCOREE.DLL">.NET中的幕后英雄：MSCOREE.DLL</a><span>(18183)</span>
</li>
<li>
<a href="/atfield/article/details/1507122" title="API Hook完全手册">API Hook完全手册</a><span>(14739)</span>
</li>
<li>
<a href="/atfield/article/details/3203602" title="PDC：Anders谈C# 4.0：新功能和展望">PDC：Anders谈C# 4.0：新功能和展望</a><span>(13577)</span>
</li>
<li>
<a href="/atfield/article/details/1526253" title="VC运行库版本不同导致链接.LIB静态库时发生重复定义问题的一个案例分析和总结">VC运行库版本不同导致链接.LIB静态库时发生重复定义问题的一个案例分析和总结</a><span>(12620)</span>
</li>
<li>
<a href="/atfield/article/details/23449089" title=".NET直接编译成本地代码：.NET Native架构简介">.NET直接编译成本地代码：.NET Native架构简介</a><span>(12212)</span>
</li>
<li>
<a href="/atfield/article/details/1589603" title="一道看上去很吓人的算法面试题：如何对n个数进行排序，要求时间复杂度O(n)，空间复杂度O(1)">一道看上去很吓人的算法面试题：如何对n个数进行排序，要求时间复杂度O(n)，空间复杂度O(1)</a><span>(9445)</span>
</li>
<li>
<a href="/atfield/article/details/1532506" title="UNIX信号(signal)编程 - UNIX高级环境编程第10章读书笔记">UNIX信号(signal)编程 - UNIX高级环境编程第10章读书笔记</a><span>(9291)</span>
</li>
<li>
<a href="/atfield/article/details/4037248" title="调试Bug的神兵利器：通过WinDbg条件断点收集Log">调试Bug的神兵利器：通过WinDbg条件断点收集Log</a><span>(8580)</span>
</li>
</ul>
</div>
<div id="hotarticls2" class="panel">
<ul class="panel_head"><span>评论排行</span></ul>
<ul class="panel_body itemlist">
<li>
<a href="/atfield/article/details/3203602" title="PDC：Anders谈C# 4.0：新功能和展望">PDC：Anders谈C# 4.0：新功能和展望</a><span>(75)</span>
</li>
<li>
<a href="/atfield/article/details/23449089" title=".NET直接编译成本地代码：.NET Native架构简介">.NET直接编译成本地代码：.NET Native架构简介</a><span>(69)</span>
</li>
<li>
<a href="/atfield/article/details/4493003" title="如果一个程序跑10000次只失败一次，你会怎么调试？">如果一个程序跑10000次只失败一次，你会怎么调试？</a><span>(55)</span>
</li>
<li>
<a href="/atfield/article/details/4202048" title="Visual Studio 2010 + .NET 4.0Beta1发布!">Visual Studio 2010 + .NET 4.0Beta1发布!</a><span>(27)</span>
</li>
<li>
<a href="/atfield/article/details/4465227" title=".NET 4.0中的新功能介绍：契约式设计 (Design By Contracts)">.NET 4.0中的新功能介绍：契约式设计 (Design By Contracts)</a><span>(24)</span>
</li>
<li>
<a href="/atfield/article/details/1750890" title=".NET中的幕后英雄：MSCOREE.DLL">.NET中的幕后英雄：MSCOREE.DLL</a><span>(23)</span>
</li>
<li>
<a href="/atfield/article/details/1382694" title="C++反汇编揭秘1 – 一个简单C++程序反汇编解析 (Rev. 3)">C++反汇编揭秘1 – 一个简单C++程序反汇编解析 (Rev. 3)</a><span>(14)</span>
</li>
<li>
<a href="/atfield/article/details/1589603" title="一道看上去很吓人的算法面试题：如何对n个数进行排序，要求时间复杂度O(n)，空间复杂度O(1)">一道看上去很吓人的算法面试题：如何对n个数进行排序，要求时间复杂度O(n)，空间复杂度O(1)</a><span>(14)</span>
</li>
<li>
<a href="/atfield/article/details/3204289" title="VS 2010 &amp;amp; .NET 4.0 CTP下载地址（10/31放出）">VS 2010 &amp;amp; .NET 4.0 CTP下载地址（10/31放出）</a><span>(13)</span>
</li>
<li>
<a href="/atfield/article/details/1496132" title="如何求最长连续公共子序列和最长连续子字符串">如何求最长连续公共子序列和最长连续子字符串</a><span>(9)</span>
</li>
</ul>
</div>
<div id="homepageArticles" class="panel tracking-ad" data-mod="popu_4">
<ul class="panel_head"><span>推荐文章</span></ul>
<ul class="panel_body" id="ad_commend"></ul>
</div>
<script type="text/javascript">
 new Ad(12, 'ad_commend');
</script><div id="newcomments" class="panel">
<ul class="panel_head"><span>最新评论</span></ul>
<ul class="panel_body itemlist">
    <li>
   
         <a href="/atfield/article/details/23449089#comments">.NET直接编译成本地代码：.NET Native架构简介</a>
    <p style="margin:0px;"><a href="/hoopmac" class="user_name">hoopmac</a>:
还期待着VS2015发布的时候能听到一些.net native的消息...哎
    </p>
    </li>
    <li>
   
         <a href="/atfield/article/details/23449089#comments">.NET直接编译成本地代码：.NET Native架构简介</a>
    <p style="margin:0px;"><a href="/ProjectDD" class="user_name">ProjectDD</a>:
一年过去了依旧 哑火状态
    </p>
    </li>
    <li>
   
         <a href="/atfield/article/details/23449089#comments">.NET直接编译成本地代码：.NET Native架构简介</a>
    <p style="margin:0px;"><a href="/h0730303779" class="user_name">h0730303779</a>:
1年过去了。。。现在能支持winform了没？大神们？
    </p>
    </li>
    <li>
   
         <a href="/atfield/article/details/4493003#comments">如果一个程序跑10000次只失败一次，你会怎么调试？</a>
    <p style="margin:0px;"><a href="/u013842721" class="user_name">u013842721</a>:
受益，谢谢博主。
    </p>
    </li>
    <li>
   
         <a href="/atfield/article/details/4493003#comments">.NET直接编译成本地代码：.NET Native架构简介</a>
    <p style="margin:0px;"><a href="/yinhu201" class="user_name">yinhu201</a>:
我只关心wpf和winform，应用商店程序没什么人愿意用的。
    </p>
    </li>
    <li>
   
         <a href="/atfield/article/details/1589603#comments">一道看上去很吓人的算法面试题：如何对n个数进行排序，要求时间复杂度O(n)，空间复杂度O(1)</a>
    <p style="margin:0px;"><a href="/sinat_20565969" class="user_name">sinat_20565969</a>:
万一 n 个 数 里面 有重复的数 怎么办呢？输出的时候把 两个 重复 的 数 合并算 成一个 吗？
    </p>
    </li>
    <li>
   
         <a href="/atfield/article/details/1589603#comments">.NET直接编译成本地代码：.NET Native架构简介</a>
    <p style="margin:0px;"><a href="/ttgss" class="user_name">ttgss</a>:
楼主也知道谷歌的ART和ARC了吧.你们现在什么程度了?   还是不管winform?
    </p>
    </li>
    <li>
   
         <a href="/atfield/article/details/1589603#comments">.NET直接编译成本地代码：.NET Native架构简介</a>
    <p style="margin:0px;"><a href="/ttgss" class="user_name">ttgss</a>:
楼主也知道谷歌的ART和ARC了吧.你们现在什么程度了?   还是不管winform?
    </p>
    </li>
    <li>
   
         <a href="/atfield/article/details/1589603#comments">.NET直接编译成本地代码：.NET Native架构简介</a>
    <p style="margin:0px;"><a href="/ttgss" class="user_name">ttgss</a>:
楼主也知道谷歌的ART和ARC了吧.你们现在什么程度了?   还是不管winform?
    </p>
    </li>
    <li>
   
         <a href="/atfield/article/details/1589603#comments">.NET直接编译成本地代码：.NET Native架构简介</a>
    <p style="margin:0px;"><a href="/sqlnew" class="user_name">sqlnew</a>:
虽然我是微软的支持者和开发者，但我不得不说的是，微软真的是被自己玩残了，被自己的策略玩残了。不要以为...
    </p>
    </li>
</ul>
</div>


<div id="custom_column_942172" class="panel">
<ul class="panel_head"><span>.NET</span></ul>
<ul class="panel_body">
<ul><li><a href="http://blog.joycode.com/vbcti" target=_blank>VB CTI Blog</a></li></ul>
</ul>
</div>

<div id="custom_column_942173" class="panel">
<ul class="panel_head"><span>ACM &amp; Algorithms</span></ul>
<ul class="panel_body">
<ul><li><a href="http://acm.uva.es/problemset/" target=_blank>UVa Online Judge</a></li><li><a href="http://acm.timus.ru/" target=_blank>Ural Online Judge</a></li><li><a href="http://www.topcoder.com/" target=_blank>Top Coder</a></li></ul>
</ul>
</div>

<div id="custom_column_942174" class="panel">
<ul class="panel_head"><span>Blog Links</span></ul>
<ul class="panel_body">
<ul><li><a href="http://blog.csdn.net/silverlightshanghai" target=_blank>Silverlight上海开发团队Blog</a> (<a href="http://blog.csdn.net/silverlightshanghai/Rss.aspx" target=_blank>RSS</a>)</li><li><a href="http://blog.joycode.com/vbcti/" target=_blank>VBCTI team blog</a> (<a href="http://blog.joycode.com/vbcti/Rss.aspx" target=_blank>RSS</a>)</li><li><a href="http://weblogs.asp.net/scottgu/" target=_blank>Scott Guthrie</a> (<a href="http://weblogs.asp.net/scottgu/rss.aspx" target=_blank>RSS</a>)</li><li><a href="http://blogs.msdn.com/Adam_Nathan/" target=_blank>Adam Nathan</a> (<a href="http://blogs.msdn.com/adam_nathan/rss.xml" target=_blank>RSS</a>)</li><li><a href="http://blogs.msdn.com/joshwil/" target=_blank>Josh Williams</a> (<a href="http://blogs.msdn.com/joshwil/rss.xml" target=_blank>RSS</a>)</li><li><a href="http://blogs.msdn.com/yunjin/" target=_blank>Yun Jin</a> (<a href="http://blogs.msdn.com/yunjin/rss.xml" target=_blank>RSS</a>)</li><li><a href="http://blogs.msdn.com/patrick_dussud/default.aspx" target=_blank>Patrick Dussud</a> (<a href="http://blogs.msdn.com/patrick_dussud/rss.xml" target=_blank>RSS</a>)</li><li><a href="http://blogs.msdn.com/davidnotario/" target=_blank>David Notario</a> (<a href="http://blogs.msdn.com/davidnotario/rss.xml" target=_blank>RSS</a>)</li><li><a href="http://blogs.msdn.com/suzcook/" target=_blank>Suzanne Cook</a> (<a href="http://blogs.msdn.com/suzcook/rss.xml" target=_blank>RSS</a>)</li><li><a href="http://blogs.msdn.com/junfeng/" target=_blank>Junfeng Zhang</a> (<a href="http://blogs.msdn.com/junfeng/rss.xml" target=_blank>RSS</a>)</li><li><a href="http://blogs.msdn.com/BCLTeam/" target=_blank>BCL Team Blog</a> (<a href="http://blogs.msdn.com/bclteam/rss.xml" target=_blank>RSS</a>)</li><li><a href="http://blogs.msdn.com/jmstall/" target=_blank>Mike Stall</a> (<a href="http://blogs.msdn.com/jmstall/rss.xml" target=_blank>RSS</a>)</li><li><a href="http://blogs.msdn.com/cbrumme/default.aspx" target=_blank>Chris Brumme</a> (<a href="http://blogs.msdn.com/cbrumme/rss.xml" target=_blank>RSS</a>)</li><li><a href="http://blogs.msdn.com/thottams/default.aspx" target=_blank>Thottam R. Sriram</a> (<a href="http://blogs.msdn.com/thottams/rss.xml" target=_blank>RSS</a>)</li><li><a href="http://blogs.msdn.com/varunsekhri/default.aspx" target=_blank>Varun Sekhri</a> (<a href="http://blogs.msdn.com/varunsekhri/rss.xml" target=_blank>RSS</a>)</li><li><a href="http://blogs.msdn.com/mbend/" target=_blank>Mason Bendixen</a> (<a href="http://blogs.msdn.com/mbend/rss.xml" target=_blank>RSS</a>)</li><li><a href="http://blogs.msdn.com/oldnewthing/" target=_blank>Raymond Chen's Blog</a> (<a href="http://blogs.msdn.com/oldnewthing/rss.xml" target=_blank>RSS</a>)</li><li><a href="http://www.wintellect.com/cs/blogs/JeffreyR/default.aspx" target=_blank>Jeffrey Richter's Blog</a> (<a href="http://www.wintellect.com/cs/blogs/jeffreyr/rss.aspx" target=_blank>RSS</a>)</li><li><a href="http://blogs.msdn.com/matt_pietrek/default.aspx" target=_blank>Matt Pietrek's Blog</a> (<a href="http://blogs.msdn.com/matt_pietrek/rss.xml" target=_blank>RSS</a>)</li></ul>
</ul>
</div>

<div id="custom_column_942175" class="panel">
<ul class="panel_head"><span>Compilers</span></ul>
<ul class="panel_body">
<ul><li><a href="http://www.compilers.net/" target=_blank>www.compilers.net</a></li><li><a href="http://gcc.gnu.org/" target=_blank>GCC</a></li><li><a href="http://www.python.org" target=_blank>Python</a></li><li><a href="https://openjdk.dev.java.net/hotspot/" target=_blank>Java Hotspot VM</a></li></ul>
</ul>
</div>    </div>
    <div class="clear">
    </div>
 </div>   
            <div class="clear">
            </div>
        </div>
        

<script type="text/javascript" src="http://c.csdnimg.cn/rabbit/cnick/cnick.js"></script>
<script type="text/javascript" src="http://static.blog.csdn.net/scripts/newblog.min.js"></script>


<script type="text/javascript" src="http://medal.blog.csdn.net/showblogmedal.ashx?blogid=11759"></script>
<script type="text/javascript" src="http://static.blog.csdn.net/scripts/JavaScript1.js"></script>

    <script type="text/javascript" src="http://passport.csdn.net/content/loginbox/login.js"></script>
<script type="text/javascript">document.write("<img src=http://counter.csdn.net/pv.aspx?id=24 border=0 width=0 height=0>");</script>
<script type="text/javascript" src="http://www.csdn.net/ui/scripts/Csdn/counter.js"></script>
<script type="text/javascript" src="http://ad.csdn.net/scripts/ad-blog.js"></script>
<script type="text/javascript">
    $(function () {
        function __get_code_toolbar(snippet_id) {
            return $("<a href='https://code.csdn.net/snippets/"
                    + snippet_id
                    + "' target='_blank' title='在CODE上查看代码片' style='text-indent:0;'><img src='https://code.csdn.net/assets/CODE_ico.png' width=12 height=12 alt='在CODE上查看代码片' style='position:relative;top:1px;left:2px;'/></a>"
                    + "<a href='https://code.csdn.net/snippets/"
                    + snippet_id
                    + "/fork' target='_blank' title='派生到我的代码片'  style='text-indent:0;'><img src='https://code.csdn.net/assets/ico_fork.svg' width=12 height=12 alt='派生到我的代码片' style='position:relative;top:2px;left:2px;'/></a>");
        }
        
        $("[code_snippet_id]").each(function () {
            __s_id = $(this).attr("code_snippet_id");
            if (__s_id != null && __s_id != "" && __s_id != 0 && parseInt(__s_id) > 70020) {
                __code_tool = __get_code_toolbar(__s_id);
                $(this).prev().find(".tools").append(__code_tool);
            }
        });
    });
</script>




    </div>
      <!--new top-->
    
    <script id="csdn-toolbar-id" btnId="header_notice_num" wrapId="note1" count="5" subCount="5" type="text/javascript" src="http://static.csdn.net/public/common/toolbar/js/toolbar.js"></script>     <!--new top-->
   
    <link href="http://c.csdnimg.cn/comm_ask/css/ask_float_block.css" type="text/css" rel="stylesheet" />
    <script language='JavaScript' type='text/javascript' src='http://c.csdnimg.cn/comm_ask/js/libs/wmd.js'></script>
    <script language='JavaScript' type='text/javascript' src='http://c.csdnimg.cn/comm_ask/js/libs/showdown.js'></script>
    <script language='JavaScript' type='text/javascript' src='http://c.csdnimg.cn/comm_ask/js/libs/prettify.js'></script>
    <script language='JavaScript' type='text/javascript' src='http://c.csdnimg.cn/comm_ask/js/apps/ask_float_block.js'></script>
   
</body>
</html>   
 